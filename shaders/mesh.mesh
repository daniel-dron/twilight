#version 460

#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require
#extension GL_EXT_mesh_shader : require
#extension GL_ARB_gpu_shader_int64 : enable

#include "draws.glsl"
#include "mesh.glsl"

layout( local_size_x = 32, local_size_y = 1, local_size_z = 1 ) in;
layout( triangles, max_vertices = 64, max_primitives = 126 ) out;

layout( push_constant, scalar ) uniform block {
    mat4              view;
    mat4              projection;
    vec4              camera_position;
    DrawsBuffer       draws_buffer;
    MeshesBuffer      meshes_buffer;
    MeshletBuffer     meshlets_buffer;
    MeshletDataBuffer meshlets_data_buffer;
    VertexBuffer      vertex_buffer;
};

layout( location = 0 ) out vec3 color[];

struct MeshTaskPayload {
    uint meshlet_indices[32];
    uint draw_id;
    uint lod_id;
};
taskPayloadSharedEXT MeshTaskPayload payload;

void main( ) {
    uint mid  = payload.meshlet_indices[gl_WorkGroupID.x];
    Draw draw = draws_buffer.draws[payload.draw_id];

    Mesh    mesh    = meshes_buffer.meshes[uint( draw.mesh )];
    Lod     lod     = mesh.lods[payload.lod_id];
    Meshlet meshlet = meshlets_buffer.meshlets[lod.meshlet_index + mid];

    SetMeshOutputsEXT( meshlet.vertex_count, meshlet.triangle_count );

    for ( uint i = gl_LocalInvocationIndex; i < meshlet.vertex_count; i += gl_WorkGroupSize.x ) {
        uint   vindex = meshlets_data_buffer.data[uint( meshlet.data_offset + i )] + mesh.vertex_offset;
        Vertex v      = vertex_buffer.vertices[vindex];
        vec4   pos    = projection * view * draw.model * vec4( v.vx, v.vy, v.vz, 1 );
        color[i]      = vec3( v.nx, v.ny, v.nz ) * 0.5 + 0.5;

        gl_MeshVerticesEXT[i].gl_Position = pos;
    }

    for ( uint i = gl_LocalInvocationIndex; i < meshlet.triangle_count; i += gl_WorkGroupSize.x ) {
        uint index                        = i * 3;
        uint offset                       = uint( meshlet.data_offset + meshlet.vertex_count );
        gl_PrimitiveTriangleIndicesEXT[i] = uvec3(
                meshlets_data_buffer.data[index + offset],
                meshlets_data_buffer.data[index + offset + 1],
                meshlets_data_buffer.data[index + offset + 2] );
    }
}